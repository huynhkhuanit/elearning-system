const mysql = require('mysql2/promise');
const path = require('path');
const { randomUUID } = require('crypto');
require('dotenv').config({ path: path.join(__dirname, '..', '.env.local') });

async function seedChaptersAndLessons() {
  const connection = await mysql.createConnection({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || '',
    database: process.env.DB_NAME || 'learning_platform_db',
  });

  try {
    console.log('üå± Starting to seed chapters and lessons...');

    // Get all courses
    const [courses] = await connection.query('SELECT id, slug, title FROM courses WHERE is_published = 1');
    
    if (courses.length === 0) {
      console.log('‚ùå No published courses found. Please seed courses first.');
      return;
    }

    for (const course of courses) {
      console.log(`\nüìö Seeding content for course: ${course.title}`);

      // Create chapters for each course
      const chapters = [
        {
          title: 'Gi·ªõi thi·ªáu kh√≥a h·ªçc',
          description: 'T·ªïng quan v·ªÅ kh√≥a h·ªçc v√† chu·∫©n b·ªã m√¥i tr∆∞·ªùng h·ªçc t·∫≠p',
          sort_order: 1,
          lessons: [
            { title: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi kh√≥a h·ªçc', duration: 330, is_preview: 1 },
            { title: 'C√†i ƒë·∫∑t m√¥i tr∆∞·ªùng l√†m vi·ªác', duration: 765, is_preview: 1 },
            { title: 'T√†i li·ªáu v√† ngu·ªìn h·ªçc t·∫≠p', duration: 600, is_preview: 0 },
            { title: 'C√°ch h·ªçc hi·ªáu qu·∫£ nh·∫•t', duration: 480, is_preview: 0 }
          ]
        },
        {
          title: 'Ki·∫øn th·ª©c n·ªÅn t·∫£ng',
          description: 'C√°c kh√°i ni·ªám c∆° b·∫£n v√† c√∫ ph√°p c·∫ßn thi·∫øt',
          sort_order: 2,
          lessons: [
            { title: 'C√°c kh√°i ni·ªám c∆° b·∫£n', duration: 1100, is_preview: 0 },
            { title: 'C√∫ ph√°p v√† quy t·∫Øc', duration: 1510, is_preview: 0 },
            { title: 'Bi·∫øn v√† ki·ªÉu d·ªØ li·ªáu', duration: 920, is_preview: 0 },
            { title: 'To√°n t·ª≠ v√† bi·ªÉu th·ª©c', duration: 1050, is_preview: 0 },
            { title: 'B√†i t·∫≠p th·ª±c h√†nh', duration: 1800, is_preview: 0 },
            { title: 'Best Practices c∆° b·∫£n', duration: 930, is_preview: 0 }
          ]
        },
        {
          title: 'L·∫≠p tr√¨nh n√¢ng cao',
          description: 'C√°c k·ªπ thu·∫≠t v√† patterns n√¢ng cao',
          sort_order: 3,
          lessons: [
            { title: 'Functions v√† Methods', duration: 1320, is_preview: 0 },
            { title: 'Object-Oriented Programming', duration: 1680, is_preview: 0 },
            { title: 'Error Handling', duration: 990, is_preview: 0 },
            { title: 'Asynchronous Programming', duration: 1440, is_preview: 0 },
            { title: 'Design Patterns', duration: 1200, is_preview: 0 }
          ]
        },
        {
          title: 'D·ª± √°n th·ª±c t·∫ø 1',
          description: 'X√¢y d·ª±ng ·ª©ng d·ª•ng ho√†n ch·ªânh t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi',
          sort_order: 4,
          lessons: [
            { title: 'Ph√¢n t√≠ch y√™u c·∫ßu d·ª± √°n', duration: 1200, is_preview: 0 },
            { title: 'Thi·∫øt k·∫ø database', duration: 1380, is_preview: 0 },
            { title: 'Thi·∫øt k·∫ø giao di·ªán', duration: 2145, is_preview: 0 },
            { title: 'X√¢y d·ª±ng t√≠nh nƒÉng Authentication', duration: 1890, is_preview: 0 },
            { title: 'X√¢y d·ª±ng t√≠nh nƒÉng ch√≠nh', duration: 2730, is_preview: 0 },
            { title: 'T·ªëi ∆∞u v√† ho√†n thi·ªán', duration: 1695, is_preview: 0 },
            { title: 'Testing v√† Debugging', duration: 1560, is_preview: 0 },
            { title: 'Deploy l√™n production', duration: 1350, is_preview: 0 }
          ]
        },
        {
          title: 'Ki·∫øn th·ª©c n√¢ng cao',
          description: 'Performance, Security v√† Best Practices',
          sort_order: 5,
          lessons: [
            { title: 'Performance Optimization', duration: 1940, is_preview: 0 },
            { title: 'Caching Strategies', duration: 1320, is_preview: 0 },
            { title: 'Security Best Practices', duration: 1720, is_preview: 0 },
            { title: 'Code Review v√† Refactoring', duration: 1500, is_preview: 0 },
            { title: 'Testing Strategies', duration: 2115, is_preview: 0 },
            { title: 'Quiz t·ªïng h·ª£p', duration: 2700, is_preview: 0 }
          ]
        },
        {
          title: 'D·ª± √°n th·ª±c t·∫ø 2',
          description: 'D·ª± √°n ph·ª©c t·∫°p v·ªõi nhi·ªÅu t√≠nh nƒÉng',
          sort_order: 6,
          lessons: [
            { title: 'T·ªïng quan d·ª± √°n e-commerce', duration: 1080, is_preview: 0 },
            { title: 'Setup project v√† dependencies', duration: 960, is_preview: 0 },
            { title: 'X√¢y d·ª±ng API Backend', duration: 2880, is_preview: 0 },
            { title: 'T√≠ch h·ª£p Payment Gateway', duration: 2160, is_preview: 0 },
            { title: 'Shopping Cart v√† Checkout', duration: 2520, is_preview: 0 },
            { title: 'Admin Dashboard', duration: 2340, is_preview: 0 },
            { title: 'Email v√† Notifications', duration: 1680, is_preview: 0 },
            { title: 'Deploy v√† CI/CD', duration: 1800, is_preview: 0 }
          ]
        },
        {
          title: 'Microservices Architecture',
          description: 'Ki·∫øn tr√∫c h·ªá th·ªëng quy m√¥ l·ªõn',
          sort_order: 7,
          lessons: [
            { title: 'Gi·ªõi thi·ªáu Microservices', duration: 1440, is_preview: 0 },
            { title: 'Service Communication', duration: 1800, is_preview: 0 },
            { title: 'API Gateway', duration: 1560, is_preview: 0 },
            { title: 'Service Discovery', duration: 1320, is_preview: 0 },
            { title: 'Message Queue', duration: 1680, is_preview: 0 },
            { title: 'Distributed Tracing', duration: 1200, is_preview: 0 }
          ]
        },
        {
          title: 'DevOps v√† Cloud',
          description: 'Deploy v√† qu·∫£n l√Ω ·ª©ng d·ª•ng tr√™n cloud',
          sort_order: 8,
          lessons: [
            { title: 'Docker fundamentals', duration: 1920, is_preview: 0 },
            { title: 'Kubernetes basics', duration: 2160, is_preview: 0 },
            { title: 'AWS/Azure/GCP overview', duration: 1800, is_preview: 0 },
            { title: 'CI/CD Pipeline', duration: 2040, is_preview: 0 },
            { title: 'Monitoring v√† Logging', duration: 1560, is_preview: 0 },
            { title: 'Infrastructure as Code', duration: 1680, is_preview: 0 }
          ]
        },
        {
          title: 'D·ª± √°n t·ªët nghi·ªáp',
          description: 'X√¢y d·ª±ng d·ª± √°n c√° nh√¢n ho√†n ch·ªânh',
          sort_order: 9,
          lessons: [
            { title: 'Ch·ªçn √Ω t∆∞·ªüng d·ª± √°n', duration: 900, is_preview: 0 },
            { title: 'Planning v√† Documentation', duration: 1200, is_preview: 0 },
            { title: 'Implementation Phase 1', duration: 3600, is_preview: 0 },
            { title: 'Implementation Phase 2', duration: 3600, is_preview: 0 },
            { title: 'Testing v√† Bug Fixes', duration: 2400, is_preview: 0 },
            { title: 'Deployment v√† Presentation', duration: 1800, is_preview: 0 }
          ]
        },
        {
          title: 'Bonus: Career Development',
          description: 'Chu·∫©n b·ªã cho s·ª± nghi·ªáp l·∫≠p tr√¨nh vi√™n',
          sort_order: 10,
          lessons: [
            { title: 'Resume v√† Portfolio', duration: 1080, is_preview: 0 },
            { title: 'Interview Skills', duration: 1440, is_preview: 0 },
            { title: 'Coding Interview Prep', duration: 1800, is_preview: 0 },
            { title: 'Networking v√† Personal Branding', duration: 1200, is_preview: 0 },
            { title: 'Freelancing v√† Side Projects', duration: 1320, is_preview: 0 }
          ]
        }
      ];

      for (const chapterData of chapters) {
        // Generate UUID for chapter
        const chapterId = randomUUID();
        
        // Insert chapter with UUID
        await connection.query(
          `INSERT INTO chapters (id, course_id, title, description, sort_order, is_published)
           VALUES (?, ?, ?, ?, ?, 1)`,
          [chapterId, course.id, chapterData.title, chapterData.description, chapterData.sort_order]
        );

        console.log(`  ‚úÖ Created chapter: ${chapterData.title}`);

        // Insert lessons for this chapter
        for (let i = 0; i < chapterData.lessons.length; i++) {
          const lesson = chapterData.lessons[i];
          const lessonId = randomUUID();
          
          await connection.query(
            `INSERT INTO lessons (id, chapter_id, title, video_duration, sort_order, is_preview, is_published)
             VALUES (?, ?, ?, ?, ?, ?, 1)`,
            [lessonId, chapterId, lesson.title, lesson.duration, i + 1, lesson.is_preview]
          );
        }
        console.log(`    üìù Created ${chapterData.lessons.length} lessons`);
      }

      // Update course total_lessons
      const [lessonCount] = await connection.query(
        `SELECT COUNT(*) as total
         FROM lessons l
         INNER JOIN chapters c ON l.chapter_id = c.id
         WHERE c.course_id = ?`,
        [course.id]
      );

      await connection.query(
        'UPDATE courses SET total_lessons = ? WHERE id = ?',
        [lessonCount[0].total, course.id]
      );

      console.log(`‚ú® Completed seeding for ${course.title}`);
    }

    console.log('\nüéâ All chapters and lessons seeded successfully!');

  } catch (error) {
    console.error('‚ùå Error seeding data:', error);
  } finally {
    await connection.end();
  }
}

seedChaptersAndLessons();

